//
//  SuggestItineraryViewController.m
//  Places
//
//  Created by Iris Fu on 8/11/22.
//

#import "SuggestItineraryViewController.h"
#import "ComposeItineraryViewController.h"
#import "PlaceTypeCell.h"

@interface SuggestItineraryViewController () <UITableViewDelegate, UITableViewDataSource>
@property (nonatomic) UITapGestureRecognizer *tapRecognizer;
@property (strong, nonatomic) IBOutlet UITextField *regionsField;
@property (strong, nonatomic) IBOutlet UITextField *numberOfDays;
@property (strong, nonatomic) IBOutlet UITextField *pace;
@property (strong, nonatomic) IBOutlet UITableView *placeTypesTableView;
@property (strong, nonatomic) NSArray *placeTypes;
@property (strong, nonatomic) NSMutableArray *selectedPlaceTypes;

@property (strong, nonatomic) Itinerary *autogeneratedItinerary;
//@property (strong, nonatomic) NSMutableArray *allPlaces;
//@property (strong, nonatomic) NSMutableArray *trimmedPlacesToGo;

@end

@implementation SuggestItineraryViewController

- (void)viewDidLoad {
    [super viewDidLoad];
//    self.allPlaces = [[NSMutableArray alloc]init];
    
    self.tapRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(didTapAnywhere:)];
    self.tapRecognizer.cancelsTouchesInView = NO;
    [self.view addGestureRecognizer:self.tapRecognizer];
    
    self.title = @"Autogenerate Itinerary";
//    self.searchBar.delegate = self;
    
    self.placeTypesTableView.delegate = self;
    self.placeTypesTableView.dataSource = self;
    self.placeTypesTableView.rowHeight = UITableViewAutomaticDimension;
    self.placeTypesTableView.allowsMultipleSelection = true;
    
    self.selectedPlaceTypes = [[NSMutableArray alloc]init];
    self.placeTypes = @[@"accounting",
                        @"airport",
                        @"amusement_park",
                        @"aquarium",
                        @"art_gallery",
                        @"atm",
                        @"bakery",
                        @"bank",
                        @"bar",
                        @"beauty_salon",
                        @"bicycle_store",
                        @"book_store",
                        @"bowling_alley",
                        @"bus_station",
                        @"cafe",
                        @"campground",
                        @"car_dealer",
                        @"car_rental",
//                        car_repair
//                        car_wash
//                        casino
//                        cemetery
//                        church
//                        city_hall
//                        clothing_store
//                        convenience_store
//                        courthouse
//                        dentist
//                        department_store
//                        doctor
//                        drugstore
//                        electrician
//                        electronics_store
//                        embassy
//                        fire_station
//                        florist
//                        funeral_home
//                        furniture_store
//                        gas_station
//                        gym
//                        hair_care
//                        hardware_store
//                        hindu_temple
//                        home_goods_store
//                        hospital
//                        insurance_agency
//                        jewelry_store
//                        laundry
//                        lawyer
//                        library
//                        light_rail_station
//                        liquor_store
//                        local_government_office
//                        locksmith
//                        lodging
//                        meal_delivery
//                        meal_takeaway
//                        mosque
//                        movie_rental
//                        movie_theater
//                        moving_company
//                        museum
//                        night_club
//                        painter
//                        park
//                        parking
//                        pet_store
//                        pharmacy
//                        physiotherapist
//                        plumber
//                        police
//                        post_office
//                        primary_school
//                        real_estate_agency
//                        restaurant
//                        roofing_contractor
//                        rv_park
//                        school
//                        secondary_school
//                        shoe_store
//                        shopping_mall
//                        spa
//                        stadium
//                        storage
//                        store
//                        subway_station
//                        supermarket
//                        synagogue
//                        taxi_stand
//                        tourist_attraction
//                        train_station
//                        transit_station
//                        travel_agency
//                        university
//                        veterinary_care
//                        zoo
    ];
    
}


#pragma mark - Table View
- (nonnull UITableViewCell *)tableView:(nonnull UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {
    PlaceTypeCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PlaceTypeCell" forIndexPath:indexPath];
    NSString *type = self.placeTypes[indexPath.row];
    cell.type.text = type;
    return cell;
}

- (NSInteger)tableView:(nonnull UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.placeTypes.count;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [self.selectedPlaceTypes addObject:self.placeTypes[indexPath.row]];
}


#pragma mark - Navigation

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    if ([segue.identifier isEqualToString:@"AutogenerateItinerarySegue"]) {
        NSString *region = self.regionsField.text;
        int days = [self.numberOfDays.text intValue];
        int placesPerDay = [self.pace.text intValue];
        int numPlacesToGenerate = days * placesPerDay;
        NSArray *selectedPlaceTypes = [self.selectedPlaceTypes copy];
        NSLog(@"Region: %@", region);
        NSLog(@"numPlacesToGenerate %d", numPlacesToGenerate);
        NSLog(@"selectedPlaceTypes %@", selectedPlaceTypes);
        
        // generate itinerary with given inputs
        self.autogeneratedItinerary = [Itinerary new];
        // set name
        self.autogeneratedItinerary.name = [NSString stringWithFormat:@"Autogenerated Itinerary for %@", [PFUser currentUser].username];
        // set dates
        NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
        dateFormatter.dateStyle = NSDateFormatterMediumStyle;
        dateFormatter.timeStyle = NSDateFormatterNoStyle;
        dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US"];
        self.autogeneratedItinerary.startDate = [dateFormatter stringFromDate:[NSDate date]];
        NSDate *endDate = [[NSCalendar currentCalendar] dateByAddingUnit:NSCalendarUnitDay value:days toDate:[NSDate date] options:0];
        self.autogeneratedItinerary.endDate = [dateFormatter stringFromDate:endDate];
        // set details
        self.autogeneratedItinerary.travelDetails = [NSString stringWithFormat:@"Consider taking a flight to %@", region];
        self.autogeneratedItinerary.lodgingDetails = [NSString stringWithFormat:@"A hotel or an Airbnb might be the move"];
        // get places to go with query to Google Place
        

//        [self fetchAllPlacesIn:region withTypes:selectedPlaceTypes callback:^(NSError *error, BOOL success) {
//            if (success) {
//                NSLog(@"self.allPlaceIDs after fetch method %@", self.allPlaces);
//                [self trimPlacesEvenlyAcrossTypesTo:numPlacesToGenerate callback:^(NSError *error, BOOL success) {
//                    if (success) {
//                        if (self.trimmedPlacesToGo.count > numPlacesToGenerate) {
//                            self.trimmedPlacesToGo = [[self.trimmedPlacesToGo subarrayWithRange:NSMakeRange(0, numPlacesToGenerate)] mutableCopy];
//                        }
//                        NSLog(@"trimmedPlacesToGo %@", self.trimmedPlacesToGo);
//                        self.autogeneratedItinerary.placesToGo = self.trimmedPlacesToGo;
//                    }
//                }];
//            }
//        }];

        UINavigationController *navigationController = [segue destinationViewController];
        ComposeItineraryViewController *composeItineraryViewController = (ComposeItineraryViewController *)navigationController.topViewController;
//        composeItineraryViewController.editDelegate = self;
        NSLog(@"autogeneratedItinerary %@", self.autogeneratedItinerary);
        composeItineraryViewController.editingMode = YES;
        composeItineraryViewController.itinerary = self.autogeneratedItinerary;
        composeItineraryViewController.autogenerateForPlaceTypes = selectedPlaceTypes;
        composeItineraryViewController.region = region;
        composeItineraryViewController.numPlacesToGenerate = [NSNumber numberWithInt:numPlacesToGenerate];
    }
}
//
//- (void)trimPlacesEvenlyAcrossTypesTo:(int)numPlaces callback:(void (^)(NSError *error, BOOL success))callback {
//    self.trimmedPlacesToGo = [[NSMutableArray alloc]init];
//    NSLog(@"self.allPlaces.count %lu", (unsigned long)self.allPlaces.count);
//    NSLog(@"numPlaces %lu", (unsigned long)numPlaces);
//    unsigned long selectionIndex = self.allPlaces.count / numPlaces;
//    NSLog(@"selectionIndex %lu", selectionIndex);
//    dispatch_group_t group = dispatch_group_create();
//    for (int i = 0; i < self.allPlaces.count; i += selectionIndex) {
//        dispatch_group_enter(group);
//        NSDictionary *googlePlaceObject = self.allPlaces[i];
//
//        PFQuery *query = [PFQuery queryWithClassName:@"Place"];
//        [query whereKey:@"placeID" equalTo:googlePlaceObject[@"place_id"]];
//        [query findObjectsInBackgroundWithBlock:^(NSArray *places, NSError *error) {
//            if (error) {
//                NSLog(@"Got an error while fetching places");
//            } else {
//                if ([places count] == 0) {
//                    Place *newPlace = [Place new];
//                    newPlace.placeID = googlePlaceObject[@"place_id"];
//                    newPlace.name = googlePlaceObject[@"name"];
//                    newPlace.address = googlePlaceObject[@"formatted_address"];
//                    newPlace.photos = googlePlaceObject[@"photos"];
//                    newPlace.rating = googlePlaceObject[@"rating"];
//                    newPlace.categories = googlePlaceObject[@"types"];
//                    newPlace.lat = googlePlaceObject[@"geometry"][@"location"][@"lat"];
//                    newPlace.lng = googlePlaceObject[@"geometry"][@"location"][@"lng"];
//                    newPlace.favoriteCount = [NSNumber numberWithInt:0];
//                    [newPlace save];
//                    NSLog(@"Created new Place model for %@", googlePlaceObject[@"name"]);
//                    [self.trimmedPlacesToGo addObject:newPlace];
//                } else {
//                    // place already a Parse object
//                    [self.trimmedPlacesToGo addObject:places[0]];
//                }
//                dispatch_group_leave(group);
//            }
//        }];
//    }
//    dispatch_group_notify(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//        NSLog(@"all groups completed in trimPlacesEvenlyAcrossTypesTo!");
//        callback(nil, YES);
//    });
//}
//
//
//- (void)fetchAllPlacesIn:(NSString *)query withTypes:(NSArray *)placeTypes callback:(void (^)(NSError *error, BOOL success))callback {
//    NSString *unreserved = @"-._~/?";
//    NSMutableCharacterSet *allowed = [NSMutableCharacterSet alphanumericCharacterSet];
//    [allowed addCharactersInString:unreserved];
//    NSString *formattedQuery = [query stringByAddingPercentEncodingWithAllowedCharacters:allowed];
//    NSLog(@"formattedQuery: %@", formattedQuery);
//
//    dispatch_group_t group = dispatch_group_create();
//
//    for (NSString *type in placeTypes) {
//        dispatch_group_enter(group);
//        NSString *formattedType = [type stringByAddingPercentEncodingWithAllowedCharacters:allowed];
//        NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"https://maps.googleapis.com/maps/api/place/textsearch/json?query=%@&type=%@&key=AIzaSyA2kTwxS9iiwWd3ydaxxwdewfAjZdKJeDE", formattedQuery, formattedType]];
//        NSLog(@"the url: %@", url);
//        NSURLRequest *request = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:10.0];
//        NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:nil delegateQueue:[NSOperationQueue mainQueue]];
//        NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
//               if (error != nil) {
//                   NSLog(@"%@", [error localizedDescription]);
//                   // TODO: can implement [self showAlertError];
//               }
//               else {
//                   NSDictionary *dataDictionary = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil];
//                   // TODO: add check to ensure that this is a valid json
//                   NSArray *resultsAsGooglePlaceObjects = dataDictionary[@"results"];
//                   NSMutableArray *searchResultPlaces = [[NSMutableArray alloc] init];
//
//                   for (NSDictionary *googlePlaceObject in resultsAsGooglePlaceObjects) {
//                       [searchResultPlaces addObject:googlePlaceObject];
//                   }
//                   [self.allPlaces addObjectsFromArray:[searchResultPlaces copy]];
//                   NSLog(@"just added to allPlaces %@", self.allPlaces);
//                   dispatch_group_leave(group);
//               }
//           }];
//        [task resume];
//    }
//    dispatch_group_notify(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{
//        callback(nil, YES);
//    });
//
//}


- (void)didTapAnywhere:(UITapGestureRecognizer *) sender {
    [self.view endEditing:YES];
}

@end

